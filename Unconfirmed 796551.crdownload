# -*- coding: utf-8 -*-
"""AAPLstockpred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y4C9Kpx9Q8fYGnDysQQ89tZFGa-dtibU
"""

# This program uses an artificial recurrent neural network called Long Short Term Memory to predict the closing stock price of Apple Inc. using ther past 60 day stock price.

#Import libraries
!pip install pandas_datareader
!pip install yfinance
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import pandas_datareader.data as web
import yfinance as yf

plt.style.use('fivethirtyeight')

#Get the stock quote
df = yf.download('AAPL', start = '2012-01-01', end = '2024-01-01')
#Show data
df

#Get numer of rows and columns in dataset
df.shape

#Visualize the closing price history
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD', fontsize=18)
plt.show()

# Load the data

#Create new dataframe with the Y axis
data = df.filter(['Close'])
#Convert dataframe to a numpy array
dataset = data.values
#Get number of rows to train model on
training_data_len = math.ceil( len(dataset) * .8)

training_data_len

#Scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

#Create training data set
train_data = scaled_data[0:training_data_len , :]

#Split data into x_train and y_train
x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  if i <= 61:
    print(x_train)
    print(y_train)
    print()

#Convert x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#Build LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#Compile model
model.compile(optimizer='adam', loss='mean_squared_error')

#Train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

# Create the test data
test_data = scaled_data[training_data_len - 60: , :]
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#Convert data to numpy array
x_test = np.array(x_test)

#Reshape data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#Get models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#Get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse

#Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

#Visualize data
plt.figure(figsize = (16,8))
plt.title('Model')
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Close Price USD ($)', fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc = 'lower right')
plt.show()

#Show the valid and predicted prices
valid

#Get quote
apple_quote = yf.download('AAPL', start = '2012-01-01', end = '2024-04-01')

#Create new dataframe
new_df = apple_quote.filter(['Close'])

#Get last 60 day closing price and convert dataframe into array
last_60_days = new_df[-60:].values

#Scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)

#Create empty list
X_test = []

#Append last 60 days
X_test.append(last_60_days_scaled)

#Convert X_test dataset into numpy array
X_test = np.array(X_test)

#Reshape data to be 3D
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

#Get predicted scaled price
pred_price = model.predict(X_test)

#Undo scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)